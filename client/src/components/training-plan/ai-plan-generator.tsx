import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Loader2, ArrowRight, Check, Calendar, Trophy, Clock } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { TrainingPlan, TrainingPlanParams } from '@/lib/ai-service';

interface AIPlanGeneratorProps {
  onPlanGenerated: (plan: TrainingPlan) => void;
}

export function AIPlanGenerator({ onPlanGenerated }: AIPlanGeneratorProps) {
  const [activeTab, setActiveTab] = useState("race-goal");
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();
  
  // Form states
  const [formData, setFormData] = useState<TrainingPlanParams>({
    fitnessLevel: 'intermediate',
    availableDaysPerWeek: 4,
    timePerSessionMinutes: 60,
    raceDistance: '10k',
    targetRace: '',
    goalTime: '',
    currentWeeklyMileage: undefined,
    preferredWorkoutTypes: [],
    injuries: [],
    startDate: undefined,
    endDate: undefined,
    userAge: undefined,
    userWeight: undefined,
    userHeight: undefined
  });
  
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleSelectChange = (name: string, value: string) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleNumberChange = (name: string, value: string) => {
    const numberValue = value === '' ? undefined : Number(value);
    setFormData(prev => ({ ...prev, [name]: numberValue }));
  };
  
  const handleMultiSelectChange = (name: string, value: string) => {
    setFormData(prev => {
      const current = prev[name as keyof TrainingPlanParams] as string[] || [];
      if (Array.isArray(current)) {
        if (current.includes(value)) {
          return { ...prev, [name]: current.filter(v => v !== value) };
        } else {
          return { ...prev, [name]: [...current, value] };
        }
      }
      return prev;
    });
  };
  
  const nextTab = () => {
    if (activeTab === "race-goal") setActiveTab("schedule");
    else if (activeTab === "schedule") setActiveTab("preferences");
    else if (activeTab === "preferences") generatePlan();
  };
  
  const prevTab = () => {
    if (activeTab === "preferences") setActiveTab("schedule");
    else if (activeTab === "schedule") setActiveTab("race-goal");
  };
  
  const generatePlan = async () => {
    try {
      setIsGenerating(true);
      
      // Validate required fields
      if (!formData.fitnessLevel || !formData.availableDaysPerWeek) {
        toast({
          title: "Missing information",
          description: "Please complete all required fields",
          variant: "destructive"
        });
        return;
      }
      
      // Call AI service to generate plan
      const response = await apiRequest("POST", "/api/generate-training-plan", formData);
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to generate training plan");
      }
      
      const plan = await response.json();
      onPlanGenerated(plan);
      
      toast({
        title: "Training plan generated",
        description: "Your personalized training plan is ready!",
        variant: "default"
      });
    } catch (error: any) {
      toast({
        title: "Error generating plan",
        description: error.message || "Something went wrong",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Create AI Training Plan</CardTitle>
        <CardDescription>
          Get a personalized training plan generated by Gemini AI based on your goals and preferences
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="race-goal">
              <Trophy className="h-4 w-4 mr-2" />
              Race Goal
            </TabsTrigger>
            <TabsTrigger value="schedule">
              <Calendar className="h-4 w-4 mr-2" />
              Schedule
            </TabsTrigger>
            <TabsTrigger value="preferences">
              <Check className="h-4 w-4 mr-2" />
              Preferences
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="race-goal" className="space-y-4 py-4">
            <div className="space-y-4">
              <div>
                <Label htmlFor="fitnessLevel">Fitness Level</Label>
                <Select 
                  value={formData.fitnessLevel} 
                  onValueChange={(value) => handleSelectChange('fitnessLevel', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select your fitness level" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="beginner">Beginner</SelectItem>
                    <SelectItem value="intermediate">Intermediate</SelectItem>
                    <SelectItem value="advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="raceDistance">Race Distance</Label>
                <Select 
                  value={formData.raceDistance} 
                  onValueChange={(value) => handleSelectChange('raceDistance', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select race distance" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5k">5K</SelectItem>
                    <SelectItem value="10k">10K</SelectItem>
                    <SelectItem value="half marathon">Half Marathon</SelectItem>
                    <SelectItem value="marathon">Marathon</SelectItem>
                    <SelectItem value="ultra">Ultra</SelectItem>
                    <SelectItem value="trail">Trail Race</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="targetRace">Target Race (Optional)</Label>
                <Input 
                  id="targetRace"
                  name="targetRace"
                  placeholder="e.g. Chicago Marathon"
                  value={formData.targetRace}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <Label htmlFor="goalTime">Goal Time (Optional)</Label>
                <Input 
                  id="goalTime"
                  name="goalTime"
                  placeholder="e.g. 3:45:00 or Sub 4 hours"
                  value={formData.goalTime}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <Label htmlFor="currentWeeklyMileage">Current Weekly Mileage</Label>
                <Input 
                  id="currentWeeklyMileage"
                  name="currentWeeklyMileage"
                  type="number"
                  placeholder="miles per week"
                  value={formData.currentWeeklyMileage || ''}
                  onChange={(e) => handleNumberChange('currentWeeklyMileage', e.target.value)}
                />
              </div>
              
              <div className="flex justify-end">
                <Button onClick={nextTab}>
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="schedule" className="space-y-4 py-4">
            <div className="space-y-4">
              <div>
                <Label htmlFor="availableDaysPerWeek">Available Days Per Week</Label>
                <Select 
                  value={formData.availableDaysPerWeek.toString()} 
                  onValueChange={(value) => handleNumberChange('availableDaysPerWeek', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select number of days" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="3">3 days</SelectItem>
                    <SelectItem value="4">4 days</SelectItem>
                    <SelectItem value="5">5 days</SelectItem>
                    <SelectItem value="6">6 days</SelectItem>
                    <SelectItem value="7">7 days</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="timePerSessionMinutes">Average Time Per Session</Label>
                <Select 
                  value={formData.timePerSessionMinutes?.toString() || '60'} 
                  onValueChange={(value) => handleNumberChange('timePerSessionMinutes', value)}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select time per session" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="30">30 minutes</SelectItem>
                    <SelectItem value="45">45 minutes</SelectItem>
                    <SelectItem value="60">60 minutes</SelectItem>
                    <SelectItem value="90">90 minutes</SelectItem>
                    <SelectItem value="120">120 minutes</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="startDate">Start Date (Optional)</Label>
                <Input 
                  id="startDate"
                  name="startDate"
                  type="date"
                  value={formData.startDate || ''}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <Label htmlFor="endDate">End Date / Race Day (Optional)</Label>
                <Input 
                  id="endDate"
                  name="endDate"
                  type="date"
                  value={formData.endDate || ''}
                  onChange={handleInputChange}
                />
              </div>
              
              <div className="flex justify-between">
                <Button variant="outline" onClick={prevTab}>
                  Back
                </Button>
                <Button onClick={nextTab}>
                  Next
                  <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </div>
            </div>
          </TabsContent>
          
          <TabsContent value="preferences" className="space-y-4 py-4">
            <div className="space-y-4">
              <div>
                <Label>Preferred Workout Types</Label>
                <div className="grid grid-cols-2 gap-2 mt-2">
                  {['Easy Runs', 'Tempo Runs', 'Intervals', 'Long Runs', 'Hill Training', 'Cross Training'].map(type => (
                    <div key={type} className="flex items-center space-x-2">
                      <input 
                        type="checkbox" 
                        id={type} 
                        checked={formData.preferredWorkoutTypes?.includes(type) || false}
                        onChange={() => handleMultiSelectChange('preferredWorkoutTypes', type)}
                        className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                      />
                      <Label htmlFor={type} className="cursor-pointer">{type}</Label>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <Label htmlFor="injuries">Injuries or Limitations (Optional)</Label>
                <Textarea 
                  id="injuries"
                  placeholder="Describe any injuries or limitations"
                  value={formData.injuries?.join(', ') || ''}
                  onChange={(e) => setFormData(prev => ({ 
                    ...prev, 
                    injuries: e.target.value.split(',').map(item => item.trim()).filter(Boolean)
                  }))}
                />
              </div>
              
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="userAge">Age (Optional)</Label>
                  <Input 
                    id="userAge"
                    name="userAge"
                    type="number"
                    placeholder="Years"
                    value={formData.userAge || ''}
                    onChange={(e) => handleNumberChange('userAge', e.target.value)}
                  />
                </div>
                
                <div>
                  <Label htmlFor="userWeight">Weight (Optional)</Label>
                  <Input 
                    id="userWeight"
                    name="userWeight"
                    type="number"
                    placeholder="kg"
                    value={formData.userWeight || ''}
                    onChange={(e) => handleNumberChange('userWeight', e.target.value)}
                  />
                </div>
                
                <div>
                  <Label htmlFor="userHeight">Height (Optional)</Label>
                  <Input 
                    id="userHeight"
                    name="userHeight"
                    type="number"
                    placeholder="cm"
                    value={formData.userHeight || ''}
                    onChange={(e) => handleNumberChange('userHeight', e.target.value)}
                  />
                </div>
              </div>
              
              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={prevTab}>
                  Back
                </Button>
                <Button onClick={generatePlan} disabled={isGenerating}>
                  {isGenerating ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating Plan...
                    </>
                  ) : (
                    <>Generate Training Plan</>
                  )}
                </Button>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}